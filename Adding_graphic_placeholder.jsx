// Beginning an UndoGroup for adding placeholders/imagesapp.beginUndoGroup("Placeholders");// Cycling through each comp in "Final RENDERS" folder and first checking for marker existence and then adding graphic placeholderfor (var i = 1; i <= finalRenders.numItems; i++) {        finalRenders.item(i).openInViewer();    var currentComp = finalRenders.item(i);  /////////////////////// START SECTION - ADDING TEMP TEXT LAYER TO FIND MARKER INFORMATION /////////////////////    var tempLayer = currentComp.layers.addText(currentComp.duration);    var tempText = tempLayer.property("Text").property("Source Text");          tempText.expression = "thisComp.layer(\"" + currentComp.name + ".mov\").marker.numKeys;";    var numMarkers = parseInt(tempText.value);    if (numMarkers != 0) {        // Creating an array to hold the marker information for later on        var markerArray = [];                // Cycles through each marker and adds time, duration and comment to variables        for (var j = 1; j <= numMarkers; j++) {            tempText.expression = "thisComp.layer(\"" + currentComp.name + ".mov\").marker.key(" + j + ").time;";            var markerTime = parseFloat(tempText.value);            tempText.expression = "thisComp.layer(\"" + currentComp.name + ".mov\").marker.key(" + j + ").duration;";            var markerDuration = parseFloat(tempText.value);            tempText.expression = "thisComp.layer(\"" + currentComp.name + ".mov\").marker.key(" + j + ").comment;";            var markerComment = tempText.value.toString();                        // Add the marker information as an array within markerArray            markerArray.push([markerTime, markerDuration, markerComment]);            }// for (var j = 1; j <= numMarkers; j++) {                tempLayer.remove();            /////////////////////// END SECTION - ADDING TEMP TEXT LAYER TO FIND MARKER INFORMATION /////////////////////                for (var k = 0; k < markerArray.length; k++) {            var mStart = markerArray[k][0];            var mDuration = markerArray[k][1];            var mComment = markerArray[k][2];                        // Duplicating template placeholder            var newGraphic = graphicPlaceholder.duplicate();            newGraphic.name = mComment+"_holder";            newGraphic.duration = mDuration;            // Placing new placeholder in "Final GRAPHICS" folder            newGraphic.parentFolder = finalGraphics;                        currentComp.layers.add(newGraphic);            currentComp.layer(1).startTime = mStart;         }     } else {                  tempLayer.remove();             }// if (numMarkers != 0)   }app.endUndoGroup();/////////////////////// ALL VARIABLES AND FUNCTIONS /////////////////////////////// Creates variable shortcut for app.projectvar myProj = app.project;// This function searches the entire Project folder and returns the relevant items index ID (can be folder, footage, item, etc)function getProjectID(str) {    for (var i = 1; i <= myProj.numItems; i ++) {        if (myProj.item(i).name === str) {            return myProj.item(i);            }    }} // This function allows you to set keyframes for any property you know the value of. NOTE: the values of properties can be 1d, 2d, 3d or even 4d arrays. (Opacity is 1d, Audio is 2d)function propChange(layer, propName, time, value) {    layer.property(propName).setValueAtTime(time,value);     }// This searches for name of file in Project folder, returns its index ID and assigns to a variable